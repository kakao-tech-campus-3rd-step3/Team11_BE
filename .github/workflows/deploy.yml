name: Java CI with Gradle

on:
  push:
    branches: ['main', 'develop']
  pull_request:
    branches: ['main', 'develop']

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      ACCESS_TOKEN_EXPIRATION_SECONDS: 3600
      REFRESH_TOKEN_EXPIRATION_SECONDS: 604800
      JWT_ISSUER: momeet

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: MoMeetServer
          path: build/libs/MoMeetServer-0.0.1-SNAPSHOT.jar

      - name: Upload scripts
        uses: actions/upload-artifact@v4
        with:
          name: deploy-scripts
          path: scripts/deploy.sh

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: MoMeetServer
          path: build/libs/

      - name: Download scripts
        uses: actions/download-artifact@v4
        with:
          name: deploy-scripts
          path: scripts/

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/MoMeetServer-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/MoMeetServer.jar
          scp -i private_key.pem -o StrictHostKeyChecking=no scripts/deploy.sh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/deploy.sh
          # SSH를 통해 원격 서버에서 여러 명령을 실행합니다.
          # 이 방식을 사용하면 스크립트 실행 후 로그를 즉시 확인할 수 있습니다.
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "SSH connection successful."
          
            # 배포 스크립트에 실행 권한을 부여합니다.
            chmod +x /home/${{ secrets.EC2_USERNAME }}/deploy.sh
          
            echo "Starting deployment script..."
            # 스크립트를 실행합니다. 스크립트 내부에서 백그라운드 실행 및 로그 기록을 처리합니다.
            /home/${{ secrets.EC2_USERNAME }}/deploy.sh
            echo "Waiting for the application to start..."
            sleep 10
          
            # 스크립트 실행 후 로그 파일 내용을 출력하여 GitHub Actions 로그에서 바로 확인합니다.
            echo "-------------------------------------"
            echo "Content of deploy.log:"
            echo "-------------------------------------"
            cat /home/${{ secrets.EC2_USERNAME }}/logs/deploy.log
            echo "-------------------------------------"
            echo "Content of app.log (last 20 lines):"
            echo "-------------------------------------"
            tail -n 20 /home/${{ secrets.EC2_USERNAME }}/logs/app.log
          
            # 애플리케이션이 정상적으로 실행되고 있는지 확인합니다.
            echo "-------------------------------------"
            echo "Running processes:"
            echo "-------------------------------------"
            ps aux | grep java
          EOF

          rm -f private_key.pem
          echo "Deployment job finished."